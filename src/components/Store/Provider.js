import React, { useState, useCallback, Fragment, useMemo, useEffect } from 'react'

import { Button, Slider, TextField, withStyles } from '@material-ui/core'

import { Subject, BehaviorSubject, merge } from 'rxjs'

import useStoredState from '../../lib/storedState'
import useStateFromObservable from '../../lib/stateFromObservable'

import StorableSubject from '../../lib/rxjs/StorableSubject'

import uniqueName from '../../lib/unique'

import Context from './Context'

import { debounce, get } from 'lodash'
import numeral from '../../lib/numeral'
import GUI from '../GUI'
import moment from 'moment'

import Cog from 'mdi-material-ui/Cog'
import Earth from 'mdi-material-ui/Earth'
import useSurfaceArea from '../../domain/earth/surfaceArea'
import findClosest from '../../lib/lodash/findClosest'

const Provider = ({ classes, children } = {}) => {
  const data = {
    countries: {
      surfaceArea: useSurfaceArea(),
    },
  }

  const store = useMemo(() => {
    return {
      control: {
        name: new StorableSubject(uniqueName({ separator: ' ' }), 'store/control/name'),
        save: new Subject(),
        load: new Subject(),
        state: new StorableSubject(null, 'state'),
      },
      seeds: {
        regenerte: new Subject(),
        //
        history: new StorableSubject([], 'store/seeds/history'),
        //
        locked: {
          all: new StorableSubject(true, 'store/seeds/locked/all'),
          // ACTUALLY tracks state of UNLOCKED
          sphere: new StorableSubject(true, 'store/seeds/locked/sphere'),
          tectonics: {
            sites: new StorableSubject(true, 'store/seeds/locked/tectonics/sites'),
            plates: new StorableSubject(true, 'store/seeds/locked/tectonics/plates'),
          },
        },
        //
        sphere: new StorableSubject('DEUS VULT INFIDEL', 'store/seeds/sphere'),
        tectonics: {
          sites: new StorableSubject('DEUS VULT INFIDEL', 'store/seeds/tectonics/sites'),
          plates: new StorableSubject('DEUS VULT INFIDEL', 'store/seeds/tectonics/plates'),
        },
      },
      projection: {
        type: new StorableSubject('orthographic', 'store/projection/type'),
        scale: new StorableSubject(1000, 'store/projection/scale'),
        zoom: new StorableSubject(1, 'store/projection/zoom'),
      },
      world: {
        generate: new Subject(),
        //
        N: new StorableSubject(100, 'store/world/n'),
        radius: new StorableSubject(10.0, 'store/world/radius'),
        //
        sphere: {
          jitter: new StorableSubject(0.0, 'store/world/sphere/jitter'),
        },
        visible: {
          grid: new StorableSubject(true, 'store/world/visible/grid'),
          cloud: new StorableSubject(true, 'store/world/visible/cloud'),
          triangles: new StorableSubject(true, 'store/world/visible/triangles'),
          regions: new StorableSubject(true, 'store/world/visible/regions'),
        },
      },
    }
  }, [])

  const [state] = useStateFromObservable(store.control.state)
  const [allSeedsLocked] = useStateFromObservable(store.seeds.locked.all)

  const LoadLabel = useMemo(() => {
    if (!state) return ['Load']
    return [
      'Load',
      <span key={1}>
        {get(state, 'name', '—')} &nbsp;<i style={{ color: 'gray' }}>at</i>&nbsp;{' '}
        {moment(get(state, 'timestamp', new Date())).calendar()}
      </span>,
    ]
  }, [state])

  return (
    <>
      <GUI.Root>
        <GUI.Pane name="Control" id="control" icon={<Cog />}>
          <GUI.Folder name="Data" id="control-data">
            <GUI.Input label="World Name" value={store.control.name}></GUI.Input>
            <GUI.Input label="Save" value={store.control.save}></GUI.Input>
            <GUI.Input label={LoadLabel} value={store.control.load} disabled={!state}></GUI.Input>
          </GUI.Folder>
          <GUI.Folder name="Inspector" id="control-inspector">
            <GUI.Input
              label={['Lock All Seeds?', 'No seed will be regenerated by default or on page reload.']}
              value={store.seeds.locked.all}
            ></GUI.Input>
            <GUI.Input label="Renegerate All Seeds" value={store.seeds.regenerte} disabled={allSeedsLocked}></GUI.Input>
          </GUI.Folder>
        </GUI.Pane>
        <GUI.Pane name="World" id="world" icon={<Earth />}>
          <GUI.Folder name="Monitor" id="world-monitor">
            <GUI.Input
              label="Scale"
              value={[store.projection.scale]}
              format={([scale]) => `1:${numeral(scale.value).format()} km`}
            ></GUI.Input>
            <GUI.Input
              label="Planet Radius"
              value={[store.projection.scale, store.world.radius]}
              format={([scale, radius]) => `${numeral(scale.value * radius.value).format()} km`}
            ></GUI.Input>
            <GUI.Input
              label="Planet Surface Area"
              value={[store.projection.scale, store.world.radius]}
              format={([scale, radius]) => `${numeral(4 * Math.PI * (scale.value * radius.value) ** 2).format()} km²`}
            ></GUI.Input>
            <GUI.Input
              label="Average Region Area"
              value={[store.projection.scale, store.world.radius, store.world.N, data.countries.surfaceArea]}
              debounce={50}
              format={([scale, radius, N, surfaceAreas]) => {
                const avgSurfaceArea = (4 * Math.PI * (scale.value * radius.value) ** 2) / N.value

                const [country, area] = surfaceAreas.value
                  ? findClosest(surfaceAreas.value, avgSurfaceArea, ([n, a]) => a)
                  : [null, avgSurfaceArea]

                console.log(country, area, avgSurfaceArea)

                return `${numeral(avgSurfaceArea).format()} km²${
                  country ? `  (${numeral(avgSurfaceArea / area).format('0.00%')} of ${country})` : ''
                }`
              }}
            ></GUI.Input>
          </GUI.Folder>
          <GUI.Folder name="Sphere" id="world-sphere">
            <GUI.Input label="Generate" value={store.world.generate}></GUI.Input>
            <GUI.Input
              label="Seed"
              value={store.seeds.sphere}
              enabler={store.seeds.locked.sphere}
              disabled={allSeedsLocked}
            ></GUI.Input>
            <GUI.Input label="N" value={store.world.N} min={4} max={10000}></GUI.Input>
            <GUI.Input label="Jitter" value={store.world.sphere.jitter} max={1} step={0.01}></GUI.Input>
            <GUI.Input label="Radius" value={store.world.radius} min={1} max={1000.0} step={0.01}></GUI.Input>
          </GUI.Folder>
          <GUI.Folder name="Visibility" id="world-visibility">
            <GUI.Input label="Grid" value={store.world.visible.grid}></GUI.Input>
            <GUI.Input label="Cloud" value={store.world.visible.cloud}></GUI.Input>
            <GUI.Input label="Triangulation" value={store.world.visible.triangles}></GUI.Input>
            <GUI.Input label="Tesselation" value={store.world.visible.regions}></GUI.Input>
          </GUI.Folder>
        </GUI.Pane>
      </GUI.Root>

      <Context.Provider value={store}>{children}</Context.Provider>
    </>
  )
}

export default Provider
